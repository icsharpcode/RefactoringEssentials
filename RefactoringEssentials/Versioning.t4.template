<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#+
string generatedAppVeyorVersion = "";
string generatedNuGetVersion = "";
string generatedFullVersion = "";
string generatedShortVersion = "";
string generatedRevision = "";
string releaseNotesLink = "";
string copyright = "";

void ReadVersions(string inputFileName)
{
	if (File.Exists(inputFileName))
	{
		try
		{
			string[] settings = File.ReadAllLines(inputFileName);
			foreach (string setting in settings)
			{
				string[] settingParts = setting.Split(new char[] { '=' }, 2);
				switch (settingParts[0])
				{
					case "release_notes_link":
						if (settingParts.Length > 1)
						{
							releaseNotesLink = settingParts[1];
						}
						break;

					case "copyright":
						if (settingParts.Length > 1)
						{
							copyright = settingParts[1];
						}
						break;

					case "nuget_version":
						if (settingParts.Length > 1)
						{
							generatedNuGetVersion = settingParts[1];
						}
						break;

					case "full_version":
						if (settingParts.Length > 1)
						{
							generatedFullVersion = settingParts[1];
							if (!string.IsNullOrEmpty(generatedFullVersion))
							{
								Version version = new Version(generatedFullVersion);
								generatedShortVersion = string.Format("{0}.{1}.{2}", version.Major, version.Minor, version.Build);
								generatedAppVeyorVersion = string.Format("{0}.{1}", version.Major, version.Minor);
							}
						}
						break;
				}
			}
		}
		catch (Exception)
		{
		}

		if (File.Exists(Path.Combine(Path.Combine(Path.GetDirectoryName(Host.TemplateFile), "bin"), "__debug.versioning")))
		{
			DateTime now = DateTime.Now;
			generatedRevision = ((int) (((now - (new DateTime(now.Year, 1, 1))).TotalMinutes / 20) + ((now.Year - 2015) * 10000))).ToString();
		}
		else
		{
			generatedRevision = "0";
		}
	}
}
#>