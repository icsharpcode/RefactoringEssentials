using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Diagnostics;
using System.Collections.Immutable;

namespace RefactoringEssentials.CSharp.Diagnostics
{
    [DiagnosticAnalyzer(LanguageNames.CSharp)]
    public class RedundantBaseConstructorCallAnalyzer : DiagnosticAnalyzer
    {
        private static readonly DiagnosticDescriptor descriptor = new DiagnosticDescriptor(
            CSharpDiagnosticIDs.RedundantBaseConstructorCallAnalyzerID,
            GettextCatalog.GetString("This is generated by the compiler and can be safely removed"),
            GettextCatalog.GetString("Redundant base constructor call"),
            DiagnosticAnalyzerCategories.RedundanciesInDeclarations,
            DiagnosticSeverity.Info,
            isEnabledByDefault: true,
            helpLinkUri: HelpLink.CreateFor(CSharpDiagnosticIDs.RedundantBaseConstructorCallAnalyzerID),
            customTags: DiagnosticCustomTags.Unnecessary
        );

        public override ImmutableArray<DiagnosticDescriptor> SupportedDiagnostics => ImmutableArray.Create(descriptor);

        public override void Initialize(AnalysisContext context)
        {
            context.ConfigureGeneratedCodeAnalysis(GeneratedCodeAnalysisFlags.None);
            context.RegisterSyntaxNodeAction(
                (nodeContext) =>
                {
                    Diagnostic diagnostic;
                    if (TryGetDiagnostic(nodeContext, out diagnostic))
                    {
                        nodeContext.ReportDiagnostic(diagnostic);
                    }
                },
                SyntaxKind.ConstructorDeclaration
            );
        }

        private static bool TryGetDiagnostic(SyntaxNodeAnalysisContext nodeContext, out Diagnostic diagnostic)
        {
            diagnostic = default(Diagnostic);

            var constructorDeclaration = nodeContext.Node as ConstructorDeclarationSyntax;
            if (constructorDeclaration?.Initializer?.ArgumentList.Arguments.Count != 0)
                return false;

            if (!constructorDeclaration.Initializer.IsKind(SyntaxKind.BaseConstructorInitializer))
                return false;

            var baseInitializer = constructorDeclaration.Initializer;
            if (baseInitializer.ArgumentList == null ||
                baseInitializer.ArgumentList != null && baseInitializer.ArgumentList.Arguments.Count<1)
            {
                diagnostic = Diagnostic.Create(descriptor, baseInitializer.GetLocation());
                return true;
            }
            return false;
        }
    }
}